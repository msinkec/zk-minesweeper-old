import "./mimc7" as mimc7;
import "utils/pack/bool/unpack256.zok" as unpack256bool;
import "utils/pack/u32/unpack128.zok" as unpack128u32;


def isMineHit(bool[256] mineFieldBits, u32 x, u32 y) -> bool {
    return mineFieldBits[255 - (y * 15 + x)];
}

def getMineCount(bool[256] mineFieldBits) -> u32 {
    u32 mut cnt = 0;
    for u32 i in 0..225 {   // 15 x 15 field is encoded with 225 bits
        cnt = mineFieldBits[255 - i] ? cnt + 1 : cnt;
    }
    return cnt;
}

def getNeighboringMineCount(bool[256] mineFieldBits, u32 x, u32 y) -> u32 {
    // 99999 means the neighboring field doesn't exist (in case of edges and corners).
    u32 idxUpperLeft = x > 0 && y > 0 ? (y-1) * 15 + x - 1 : 99999;
    u32 idxUpperCenter = y > 0 ? (y-1) * 15 + x : 99999;
    u32 idxUpperRight = x < 14 && y > 0 ? (y-1) * 15 + x + 1 : 99999;

    u32 idxMiddleLeft = x > 0 ? y * 15 + x - 1 : 99999;
    u32 idxMiddleRight = x < 14 ? y * 15 + x + 1 : 99999;

    u32 idxLowerLeft = x > 0 && y < 14 ? (y+1) * 15 + x - 1 : 99999;
    u32 idxLowerCenter = y < 14 ? (y+1) * 15 + x : 99999;
    u32 idxLowerRight = x < 14 && y < 14 ? (y+1) * 15 + x + 1 : 99999;


    u32 ul = (idxUpperLeft != 99999) && mineFieldBits[255 - idxUpperLeft] ? 1 : 0;
    u32 uc = (idxUpperCenter != 99999) && mineFieldBits[255 - idxUpperCenter] ? 1 : 0;
    u32 ur = (idxUpperRight != 99999) && mineFieldBits[255 - idxUpperRight] ? 1 : 0;
    u32 ml = (idxMiddleLeft != 99999) && mineFieldBits[255 - idxMiddleLeft] ? 1 : 0;
    u32 mr = (idxMiddleRight != 99999) && mineFieldBits[255 - idxMiddleRight] ? 1 : 0;
    u32 ll = (idxLowerLeft != 99999) && mineFieldBits[255 - idxLowerLeft] ? 1 : 0;
    u32 lc = (idxLowerCenter != 99999) && mineFieldBits[255 - idxLowerCenter] ? 1 : 0;
    u32 lr = (idxLowerRight != 99999) && mineFieldBits[255 - idxLowerRight] ? 1 : 0;

    return ul + uc + ur+ ml + mr + ll + lc + lr;
}

def main(private field mineField, field mineFieldCommit, field targetX, field targetY, bool mineHit, field neighborMineCount) {
    // Mine field commit check.
    // The public input with the commit value is enforced by the verifier smart contract. This
    // way the mine field configuration cannot be changed once it's commited to.
    assert(mimc7::<91>(mineField, 0) == mineFieldCommit);
    
    bool[256] mineFieldBits = unpack256bool(mineField);
    u32 x = unpack128u32(targetX)[3];
    u32 y = unpack128u32(targetY)[3];
    u32 neighCnt = unpack128u32(neighborMineCount)[3];
    
    // Check if field contains the right number of mines (32 in our example).
    assert(getMineCount(mineFieldBits) == 32);

    // Check if target field is in range. (15 x 15 mine field).
    // TODO: assertion failed: res.len() <= to (/home/runner/work/zokrates/zokrates/zokrates_core/src/flatten/mod.rs:1909:21)
    //assert(x >= 0 && x <= 14 && y >= 0 && y <= 14);

    // Check if target contains a mine.
    assert(mineHit == isMineHit(mineFieldBits, x, y));

    // Get neighboring mine count.
    assert(neighCnt == getNeighboringMineCount(mineFieldBits, x, y));

    return;
}
